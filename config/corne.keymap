/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define MED 4
#define NOT 5
#define LOC 6
// #define MOU 7

/*                            KEY POSITIONS
  ╭─────────────────────────────╮         ╭──────────────────────────────╮
  │  0   1Q   2W   3E   4R   5T │         │  6Y   7U   8I   9O  10P  11| │
  │ 12  13A  14S  15D  16F  17G │         │ 18H  19J  20K  21L  22;  23' │
  │ 24  25\  26z  27x  28c  29v ╰───╮ ╭───╯ 30b  31n  32m  33,  34.  35/ │
  ╰──────────────────╮ 36   37   38 │ │ 39   40   41 ╭───────────────────╯
                     ╰──────────────╯ ╰──────────────╯            */

/ {
    combos {
        // Symbols / Operations
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>; // KP: TAB Q
            bindings = <&kp ESC>; // ESC
            layers = <0 >;
        };
        combo_win {
            timeout-ms = <50>;
            key-positions = <36 37>; // KP: ALT SPACE
            bindings = <&kp LEFT_WIN>; // LWIN
            layers = <0 >;
        };
        combo_f12 {
            timeout-ms = <50>;
            key-positions = <10 11>; // KP:P BSK
            bindings = <&kp F12>; // F12
            layers = <0 >;
        };
        combo_SEMICOLON {
            timeout-ms = <50>;
            key-positions = <22 23>; // KP: up dot
            bindings = <&kp SEMI>; // ;
            layers = <0 >;
        };
        combo_SINGLE_QUOTE {
            timeout-ms = <50>;
            key-positions = <23 35>; // KP: dot right
            bindings = <&kp SQT>; // '
            layers = <0 >;
        };	
    };
}; 
// / {
//     macros {
//         zmk_macro: zmk_macro {
//             label = "zmk_macro";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&macro_press &kp LSHFT>
//                 , <&macro_tap &kp Z &kp M &kp K>
//                 , <&macro_release &kp LSHFT>
//                 ;
//         };
//         email_a_macro: email_a_macro {
//             label = "email_a_macro";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings
//                 = <&macro_press &kp LSHFT>
//                 , <&macro_tap &kp Z &kp M &kp K>
//                 , <&macro_release &kp LSHFT>
//                 ;
//         };
//     };
// };

/ {
        behaviors {
        // hm: homerow_mods {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "HOMEROW_MODS";
        //     #binding-cells = <2>;
        //     tapping-term-ms = <200>;
        //     quick_tap_ms = <0>;
        //     flavor = "tap-preferred";
        //     bindings = <&kp>, <&kp>;
        // };
        // hs: homerow_shifts {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "HOMEROW_SHIFTS";
        //     #binding-cells = <2>;
        //     tapping-term-ms = <150>;
        //     quick_tap_ms = <0>;
        //     flavor = "balanced";
        //     bindings = <&kp>, <&kp>;
        // };
        // td: tapdance {
        //         compatible = "zmk,behavior-hold-tap";
        //         label = "TAPDANCE";
        //         #binding-cells = <2>;
        //         tapping-term-ms = <190>;
        //         quick_tap_ms = <0>;
        //         flavor = "tap-preferred";
        //         bindings = <&kp>, <&kp>;
        //     };
        // Doesn't work: https://zmk.dev/docs/behaviors/tap-dance/#example-usage
        // td0: tap_dance_0 {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "TAP_DANCE_0";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&kp N1>, <&kp N2>, <&kp N3>;
        // };

	};


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// |Shift |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  UP | ./>  |
// | Ctrl |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   | ,/< | LEFT| DOWN| RIGHT|
//                    | Alt | SPC | C-J |   | ENT | LWR  | RSE |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T        &kp Y   &kp U   &kp I         &kp O    &kp P    &kp BSPC
   &kp LSHFT &kp A &kp S &kp D &kp F &kp G        &kp H   &kp J   &kp K         &kp L    &kp UP   &kp DOT
   &kp LCTRL &kp Z &kp X &kp C &kp V &kp B        &kp N   &kp M   &kp COMMA     &kp LEFT &kp DOWN &kp RIGHT
                &kp LALT &kp SPACE &mt LA(LSHFT) LA(GRAVE)       &kp RET  &mo LWR  &mo RSE
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------
// |  ~  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
// |Shift|  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  =  |
// | Ctrl|  0  |     |     |     |     |   |     |     |  <  |  >  |  /  |     |
//                   |     |     |     |   |     |     | ADJ |
                        bindings = <
   &kp TILDE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT        &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR &kp MINUS
   &kp LSHFT &kp N1   &kp N2 &kp N3   &kp N4   &kp N5           &kp N6    &kp N7   &kp N8   &kp N9   &kp N0   &kp EQUAL
   &kp LCTRL &kp N0   &none  &none    &none    &none            &none     &none    &kp LT   &kp GT   &kp FSLH &none
                             &none    &none   &none             &none     &none    &mo ADJ
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        label = "Raise";
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                    	     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
